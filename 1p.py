# -*- coding: utf-8 -*-
"""1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1trpt4SmlWiVzobwLV1Kcxx18vslyVq2f
"""

import matplotlib.pyplot as plt
import sklearn.metrics as metrics
import numpy as np

def linear_regression(datapoints):

    n=len(datapoints)

    #Transfering x & y coordinates in a list
    x_list=[d[0] for d in datapoints]
    y_list=[d[1] for d in datapoints]
    
    
    #calculate mean of x and y values
    x_mean=np.mean(x_list)
    y_mean=np.mean(y_list)

    #take product of x vals and x*y from list to get xx_product & yy_product
    xx_product=[x*x for x in x_list]
    xy_product = [x_list[i] * y_list[i] for i in range(n)]
    print("XX-Product initial:",xx_product)
    #take summation
    xx_product=np.sum(xx_product)
    xy_product=np.sum(xy_product)
    

    print("X-Mean:",x_mean)
    print("Y-Mean:",y_mean)

    print("XX-Product:",xx_product)
    print("XY-Product:",xy_product)

    # SS_xy = xy_prod / n*x_mean*y_mean
    SS_xy=xy_product-n*x_mean*y_mean

    # SS_xx = xx_prod / n*x_mean*x_mean
    SS_xx=xx_product-n*x_mean*x_mean

    #slope=SSxy/SSxx
    slope=SS_xy/SS_xx

    print("Slope:",slope)

    # intercept = y_mean - x_mean*slope
    intercept=y_mean-x_mean*slope

    print("Intercept:",intercept)

    print("Equation of line: y=",slope,"x+",intercept)

    return (slope,intercept)

datapoints=[
    (10,95),
    (9,80),
    (2,10),
    (15,50),
    (10,45),
    (16,98),
    (11,38),
    (16,93)
]

x=[d[0] for d in datapoints]
y=[d[1] for d in datapoints]

#call function with slope and intercept of regression line being returned.
slope,intercept=linear_regression(datapoints)

#Get prediction for all the datapoints
y_pred=[]

for point in datapoints:
    xp=point[0]
    y_pred.append(slope*xp+intercept)

print(y_pred)

d=np.array(y)-np.array(y_pred)
#print(d)
mse_f = np.mean(d**2)
mae_f = np.mean(abs(d))
rmse_f = np.sqrt(mse_f)
r2_f = 1-(sum(d**2)/sum((y-np.mean(y))**2))

print("Results by manual calculation:")
print("MAE:",mae_f)
print("MSE:", mse_f)
print("RMSE:", rmse_f)
print("R-Squared:", r2_f)
#print("Accuracy_score",acc)

mae = metrics.mean_absolute_error(y, y_pred)
mse = metrics.mean_squared_error(y, y_pred)
rmse = np.sqrt(mse) #mse**(0.5)  
r2 = metrics.r2_score(y,y_pred)

plt.scatter(x,y)
plt.show()
print("Results of sklearn.metrics:")
print("MAE:",mae)
print("MSE:", mse)
print("RMSE:", rmse)
print("R-Squared:", r2)


#PLot the points and regression line
plt.scatter(x,y)
plt.plot(x,y_pred,color="green")
plt.show()